{"version":3,"sources":["../../../../src/utils/tsconfig/evaluateTsConfig.ts"],"sourcesContent":["import path from 'path';\nimport resolveFrom from 'resolve-from';\n\nexport function evaluateTsConfig(ts: typeof import('typescript'), tsConfigPath: string) {\n  const formatDiagnosticsHost: import('typescript').FormatDiagnosticsHost = {\n    getNewLine: () => require('os').EOL,\n    getCurrentDirectory: ts.sys.getCurrentDirectory,\n    getCanonicalFileName: (fileName: string) => fileName,\n  };\n\n  try {\n    const { config, error } = ts.readConfigFile(tsConfigPath, ts.sys.readFile);\n\n    if (error) {\n      throw new Error(ts.formatDiagnostic(error, formatDiagnosticsHost));\n    }\n\n    const jsonFileContents = ts.parseJsonConfigFileContent(\n      config,\n      {\n        ...ts.sys,\n        readDirectory: (_, ext) => [ext ? `file${ext[0]}` : `file.ts`],\n      },\n      path.dirname(tsConfigPath)\n    );\n\n    if (jsonFileContents.errors) {\n      // filter out \"no inputs were found in config file\" error\n      jsonFileContents.errors = jsonFileContents.errors.filter(({ code }) => code !== 18003);\n    }\n\n    if (jsonFileContents.errors?.length) {\n      throw new Error(ts.formatDiagnostic(jsonFileContents.errors[0], formatDiagnosticsHost));\n    }\n\n    return { compilerOptions: jsonFileContents.options, raw: config.raw };\n  } catch (error: any) {\n    if (error?.name === 'SyntaxError') {\n      throw new Error('tsconfig.json is invalid:\\n' + (error.message ?? ''));\n    }\n    throw error;\n  }\n}\n\nexport function importTypeScriptFromProjectOptionally(\n  projectRoot: string\n): typeof import('typescript') | null {\n  const resolvedPath = resolveFrom.silent(projectRoot, 'typescript');\n  if (!resolvedPath) {\n    return null;\n  }\n  return require(resolvedPath);\n}\n"],"names":["evaluateTsConfig","importTypeScriptFromProjectOptionally","ts","tsConfigPath","formatDiagnosticsHost","getNewLine","require","EOL","getCurrentDirectory","sys","getCanonicalFileName","fileName","jsonFileContents","config","error","readConfigFile","readFile","Error","formatDiagnostic","parseJsonConfigFileContent","readDirectory","_","ext","path","dirname","errors","filter","code","length","compilerOptions","options","raw","name","message","projectRoot","resolvedPath","resolveFrom","silent"],"mappings":";;;;;;;;;;;IAGgBA,gBAAgB;eAAhBA;;IAyCAC,qCAAqC;eAArCA;;;;gEA5CC;;;;;;;gEACO;;;;;;;;;;;AAEjB,SAASD,iBAAiBE,EAA+B,EAAEC,YAAoB;IACpF,MAAMC,wBAAoE;QACxEC,YAAY,IAAMC,QAAQ,MAAMC,GAAG;QACnCC,qBAAqBN,GAAGO,GAAG,CAACD,mBAAmB;QAC/CE,sBAAsB,CAACC,WAAqBA;IAC9C;IAEA,IAAI;YAqBEC;QApBJ,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAE,GAAGZ,GAAGa,cAAc,CAACZ,cAAcD,GAAGO,GAAG,CAACO,QAAQ;QAEzE,IAAIF,OAAO;YACT,MAAM,IAAIG,MAAMf,GAAGgB,gBAAgB,CAACJ,OAAOV;QAC7C;QAEA,MAAMQ,mBAAmBV,GAAGiB,0BAA0B,CACpDN,QACA;YACE,GAAGX,GAAGO,GAAG;YACTW,eAAe,CAACC,GAAGC,MAAQ;oBAACA,MAAM,CAAC,IAAI,EAAEA,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,OAAO,CAAC;iBAAC;QAChE,GACAC,eAAI,CAACC,OAAO,CAACrB;QAGf,IAAIS,iBAAiBa,MAAM,EAAE;YAC3B,yDAAyD;YACzDb,iBAAiBa,MAAM,GAAGb,iBAAiBa,MAAM,CAACC,MAAM,CAAC,CAAC,EAAEC,IAAI,EAAE,GAAKA,SAAS;QAClF;QAEA,KAAIf,2BAAAA,iBAAiBa,MAAM,qBAAvBb,yBAAyBgB,MAAM,EAAE;YACnC,MAAM,IAAIX,MAAMf,GAAGgB,gBAAgB,CAACN,iBAAiBa,MAAM,CAAC,EAAE,EAAErB;QAClE;QAEA,OAAO;YAAEyB,iBAAiBjB,iBAAiBkB,OAAO;YAAEC,KAAKlB,OAAOkB,GAAG;QAAC;IACtE,EAAE,OAAOjB,OAAY;QACnB,IAAIA,CAAAA,yBAAAA,MAAOkB,IAAI,MAAK,eAAe;YACjC,MAAM,IAAIf,MAAM,gCAAiCH,CAAAA,MAAMmB,OAAO,IAAI,EAAC;QACrE;QACA,MAAMnB;IACR;AACF;AAEO,SAASb,sCACdiC,WAAmB;IAEnB,MAAMC,eAAeC,sBAAW,CAACC,MAAM,CAACH,aAAa;IACrD,IAAI,CAACC,cAAc;QACjB,OAAO;IACT;IACA,OAAO7B,QAAQ6B;AACjB"}