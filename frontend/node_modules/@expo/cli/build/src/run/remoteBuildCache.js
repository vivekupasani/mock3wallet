"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    resolveRemoteBuildCache: function() {
        return resolveRemoteBuildCache;
    },
    uploadRemoteBuildCache: function() {
        return uploadRemoteBuildCache;
    }
});
const _eas = require("../utils/remote-build-cache-providers/eas");
const debug = require('debug')('expo:run:remote-build');
async function resolveRemoteBuildCache(projectRoot, { platform, provider, runOptions }) {
    const fingerprintHash = await calculateFingerprintHashAsync(projectRoot, platform, provider);
    if (!fingerprintHash) {
        return null;
    }
    if (provider === 'eas') {
        return await (0, _eas.resolveEASRemoteBuildCache)({
            platform,
            fingerprintHash,
            projectRoot,
            runOptions
        });
    }
    return null;
}
async function uploadRemoteBuildCache(projectRoot, { platform, provider, buildPath }) {
    const fingerprintHash = await calculateFingerprintHashAsync(projectRoot, platform, provider);
    if (!fingerprintHash) {
        return;
    }
    if (provider === 'eas') {
        await (0, _eas.uploadEASRemoteBuildCache)({
            projectRoot,
            platform,
            fingerprintHash,
            buildPath
        });
    }
}
async function calculateFingerprintHashAsync(projectRoot, platform, provider) {
    if (provider === 'eas') {
        const easFingerprintHash = await (0, _eas.calculateEASFingerprintHashAsync)({
            projectRoot,
            platform
        });
        if (easFingerprintHash) {
            return easFingerprintHash;
        }
    }
    const Fingerprint = importFingerprintForDev(projectRoot);
    if (!Fingerprint) {
        debug('@expo/fingerprint is not installed in the project, skip checking for remote builds');
        return null;
    }
    const fingerprint = await Fingerprint.createFingerprintAsync(projectRoot);
    return fingerprint.hash;
}
function importFingerprintForDev(projectRoot) {
    try {
        return require(require.resolve('@expo/fingerprint', {
            paths: [
                projectRoot
            ]
        }));
    } catch  {
        return null;
    }
}

//# sourceMappingURL=remoteBuildCache.js.map