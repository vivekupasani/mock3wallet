{"version":3,"sources":["../../../../src/run/android/runAndroidAsync.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\n\nimport { resolveInstallApkNameAsync } from './resolveInstallApkName';\nimport { Options, ResolvedOptions, resolveOptionsAsync } from './resolveOptions';\nimport { exportEagerAsync } from '../../export/embed/exportEager';\nimport { Log } from '../../log';\nimport type { AndroidOpenInCustomProps } from '../../start/platforms/android/AndroidPlatformManager';\nimport { assembleAsync, installAsync } from '../../start/platforms/android/gradle';\nimport { CommandError } from '../../utils/errors';\nimport { setNodeEnv } from '../../utils/nodeEnv';\nimport { ensurePortAvailabilityAsync } from '../../utils/port';\nimport { getSchemesForAndroidAsync } from '../../utils/scheme';\nimport { ensureNativeProjectAsync } from '../ensureNativeProject';\nimport { logProjectLogsLocation } from '../hints';\nimport { resolveRemoteBuildCache, uploadRemoteBuildCache } from '../remoteBuildCache';\nimport { startBundlerAsync } from '../startBundler';\n\nconst debug = require('debug')('expo:run:android');\n\nexport async function runAndroidAsync(projectRoot: string, { install, ...options }: Options) {\n  // NOTE: This is a guess, the developer can overwrite with `NODE_ENV`.\n  const isProduction = options.variant?.toLowerCase().endsWith('release');\n  setNodeEnv(isProduction ? 'production' : 'development');\n  require('@expo/env').load(projectRoot);\n\n  const projectConfig = getConfig(projectRoot);\n  if (!options.binary && projectConfig.exp.experiments?.remoteBuildCache) {\n    const localPath = await resolveRemoteBuildCache(projectRoot, {\n      platform: 'android',\n      provider: projectConfig.exp.experiments?.remoteBuildCache.provider,\n      runOptions: options,\n    });\n    if (localPath) {\n      options.binary = localPath;\n    }\n  }\n\n  await ensureNativeProjectAsync(projectRoot, { platform: 'android', install });\n\n  const props = await resolveOptionsAsync(projectRoot, options);\n\n  debug('Package name: ' + props.packageName);\n  Log.log('› Building app...');\n\n  const androidProjectRoot = path.join(projectRoot, 'android');\n\n  let shouldUpdateBuildCache = false;\n  if (!options.binary) {\n    let eagerBundleOptions: string | undefined;\n\n    if (isProduction) {\n      eagerBundleOptions = JSON.stringify(\n        await exportEagerAsync(projectRoot, {\n          dev: false,\n          platform: 'android',\n        })\n      );\n    }\n\n    await assembleAsync(androidProjectRoot, {\n      variant: props.variant,\n      port: props.port,\n      appName: props.appName,\n      buildCache: props.buildCache,\n      architectures: props.architectures,\n      eagerBundleOptions,\n    });\n    shouldUpdateBuildCache = true;\n\n    // Ensure the port hasn't become busy during the build.\n    if (props.shouldStartBundler && !(await ensurePortAvailabilityAsync(projectRoot, props))) {\n      props.shouldStartBundler = false;\n    }\n  }\n\n  const manager = await startBundlerAsync(projectRoot, {\n    port: props.port,\n    // If a scheme is specified then use that instead of the package name.\n    scheme: (await getSchemesForAndroidAsync(projectRoot))?.[0],\n    headless: !props.shouldStartBundler,\n  });\n\n  if (!options.binary) {\n    // Find the APK file path\n    const apkFile = await resolveInstallApkNameAsync(props.device.device, props);\n    if (apkFile) {\n      // Attempt to install the APK from the file path\n      options.binary = path.join(props.apkVariantDirectory, apkFile);\n    }\n  }\n\n  if (options.binary) {\n    // Attempt to install the APK from the file path\n    const binaryPath = path.join(options.binary);\n\n    if (!fs.existsSync(binaryPath)) {\n      throw new CommandError(`The path to the custom Android binary does not exist: ${binaryPath}`);\n    }\n    Log.log(chalk.gray`\\u203A Installing ${binaryPath}`);\n    await props.device.installAppAsync(binaryPath);\n  } else {\n    await installAppAsync(androidProjectRoot, props);\n  }\n\n  await manager.getDefaultDevServer().openCustomRuntimeAsync<AndroidOpenInCustomProps>(\n    'emulator',\n    {\n      applicationId: props.packageName,\n      customAppId: props.customAppId,\n      launchActivity: props.launchActivity,\n    },\n    { device: props.device.device }\n  );\n\n  if (props.shouldStartBundler) {\n    logProjectLogsLocation();\n  } else {\n    await manager.stopAsync();\n  }\n\n  if (shouldUpdateBuildCache && projectConfig.exp.experiments?.remoteBuildCache) {\n    await uploadRemoteBuildCache(projectRoot, {\n      platform: 'android',\n      provider: projectConfig.exp.experiments?.remoteBuildCache.provider,\n      buildPath: options.binary,\n    });\n  }\n}\n\nasync function installAppAsync(androidProjectRoot: string, props: ResolvedOptions) {\n  // If we cannot resolve the APK file path then we can attempt to install using Gradle.\n  // This offers more advanced resolution that we may not have first class support for.\n  Log.log('› Failed to locate binary file, installing with Gradle...');\n  await installAsync(androidProjectRoot, {\n    variant: props.variant ?? 'debug',\n    appName: props.appName ?? 'app',\n    port: props.port,\n  });\n}\n"],"names":["runAndroidAsync","debug","require","projectRoot","install","options","projectConfig","isProduction","variant","toLowerCase","endsWith","setNodeEnv","load","getConfig","binary","exp","experiments","remoteBuildCache","localPath","resolveRemoteBuildCache","platform","provider","runOptions","ensureNativeProjectAsync","props","resolveOptionsAsync","packageName","Log","log","androidProjectRoot","path","join","shouldUpdateBuildCache","eagerBundleOptions","JSON","stringify","exportEagerAsync","dev","assembleAsync","port","appName","buildCache","architectures","shouldStartBundler","ensurePortAvailabilityAsync","manager","startBundlerAsync","scheme","getSchemesForAndroidAsync","headless","apkFile","resolveInstallApkNameAsync","device","apkVariantDirectory","binaryPath","fs","existsSync","CommandError","chalk","gray","installAppAsync","getDefaultDevServer","openCustomRuntimeAsync","applicationId","customAppId","launchActivity","logProjectLogsLocation","stopAsync","uploadRemoteBuildCache","buildPath","installAsync"],"mappings":"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"}